GIT Clone - to get a repository
git clone https://github.com/udacity/asteroids.git
git config --global color.ui auto
git diff first_id second_id
git log
git checkout (reverting back to old version)
git config --global push.default upstream
git config --global push.conflictstyle diff3
git config --global core.autocrlf true
git config --global core.editor "'C:/Program\ Files/Sublime\ Text\ 3/sublime_text.exe' -n -w"
git config --global user.email "ramakanth.dangeti@gmail.com
git config --global user.name "Ramakanth Dangeti"
git config --global core.editor "'C:/Program Files/Sublime Text 3/subl.exe' -n -w"
git diff : Changes between working directory and staging area
git diff --stage : Changes between staging area and repository.
git reset --hard : all changes from working directory and staging area will be rolled back
git branch : Branch is a label, this will give current active branch
git branch <branch name> : create a branch
git checkout <branch name>
git log --graph --oneline <master -Branch1> <coins - branch2>

git merge <master -Branch1> <coins - branch2> : check out to the branch you want to commit
git show commit_id : compare a commit to its parent
git branch -d <coins - branch_name>
git merge --abort



https://github.com/rdangeti1978/helloworld.git
git remote - To see list of remotes
git remote add origin https://github.com/rdangeti1978/helloworld.git
git remote -v


git pull origin master : get updates from GIT


Clone a repository : git clone https://github.com/LarryMad/recipes









Configure GIT:
- Place git-completion.bash, git-prompt.sh, bash_profile(.bash_profile) in home directory (Check the absolute path of sublime_text)
- Add this line to .bash_profile
	alias subl="C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe"

ls -a : Show hidden files


Create Repository:

1) be in <root-folder> and 'git init'
2) git status
3) New files.. add files to staging area (git add)
4) remove a file from staging area
git reset
git reset lesson_2_reflections.txt

5) git commit -m "Commit message" (http://udacity.github.io/git-styleguide/)



git init
git add
git status
staging area
working directory












Git Errors and Warnings Solution
Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

Panic! (the 'impossible' happened)
This is a real error message, but it’s not output by Git. Instead it’s output by GHC, the compiler for a programming language called Haskell. It’s reserved for particularly surprising errors!

Takeaway We hope these errors and warnings amused you as much as they amused us! Now that you know what kind of errors Git can throw, you’re ready to start checking out previous versions of files with Caroline.


Setting up GIT:

Change Color - Right click on screen --> Color tab


Class#29 - Setup workspace


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

You may also want to commit your changes to the file. When you're ready to move on, click "Next" to hear a perspective from an experienced Git user.

